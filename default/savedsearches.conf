[ldap_assets]
alert.suppress = 0
auto_summarize.dispatch.earliest_time = -1d@h
enableSched = 1
search = | ldapsearch domain="default" search="(objectClass=computer)" attrs="sAMAccountName, distinguishedName, dNSHostName, managedBy"\
\
| rex max_match=5 field=distinguishedName "OU=(?<dn_parsed>[^,]+)" \
| eval category=lower(replace(mvjoin(dn_parsed, "|"), " ", "_"))\
| eval priority=case(\
   match(category, "domain_controller|exchange|citrix"), "critical", \
   match(category, "server|disabled"), "high", \
   match(category, "workstation|desktop|mobile|laptop"), "medium", \
   match(category, "staging|test"), "low", \
   1==1, "unknown"\
)\
\
| eval is_expected=if(priority=="high" OR priority=="critical", "true", "false")\
| eval nt_host=replace(sAMAccountName, "\$", "")\
| rename dNSHostName AS dns managedBy AS owner\
\
| eval val2lookup = coalesce(dns, nt_host)\
| lookup dnslookup clienthost as val2lookup output clientip as ip\
\
| fillnull value="unknown" category, priority, bunit\
| table ip,mac,nt_host,dns,owner,priority,lat,long,city,country,bunit,category,pci_domain,is_expected,should_timesync,should_update,requires_av\
\
| inputlookup append=t ldap_assets.csv\
| dedup nt_host\
| outputlookup ldap_assets.csv
disabled = 1
alert.track = 0
alert.digest_mode = True
dispatch.earliest_time = 0
description = Search used to populate asset information from SA-ldapsearch.
action.email.include.results_link = 0
cron_schedule = 0 2 * * *
action.email.include.view_link = 0

[ldap_identities]
alert.suppress = 0
auto_summarize.dispatch.earliest_time = -1d@h
enableSched = 1
search = | ldapsearch domain="default" search="(&(samAccountType=805306368))" attrs="sAMAccountName, distinguishedName, userAccountControl, whenCreated, personalTitle, displayName, givenName, sn, mail, telephoneNumber, mobile, manager, department, co, l, st, accountExpires, memberOf"\
\
| rex field=memberOf "CN=(?<memberOf_parsed>[^,]+)"\
| eval memberOf=lower(replace(mvjoin(memberOf_parsed, "|"), " ", "_"))\
\
| rex max_match=5 field=distinguishedName "OU=(?<dn_parsed>[^,]+)"\
| eval category=lower(replace(mvjoin(dn_parsed, "|"), " ", "_"))\
| eval priority=case(\
   match(category, "domain_admin|disabled|hold|executive") OR match(memberOf, "domain_admins|enterprise_admins|schema_admins|administrators"), "critical", \
   match(category, "contractor|service_account|external"), "high", \
   match(category, "employees|training|user_accounts|users|administration"), "medium", \
   1==1, "unknown"\
)\
\
| eval watchlist=case(match(category,"disabled|hold"), "true", 1==1, "false")\
| eval startDate=strftime(strptime(whenCreated,"%Y%m%d%H%M"), "%m/%d/%Y %H:%M")\
| eval endDate=strftime(strptime(accountExpires,"%Y-%m-%dT%H:%M:%S%Z"), "%m/%d/%Y %H:%M")\
| eval work_city=mvjoin(mvappend(l, st), ", ")\
\
| rename sAMAccountName as identity, personalTitle as prefix, displayName as nick, givenName as first, sn as last, mail as email, telephoneNumber as phone,mobile as phone2, manager AS managedBy, department as bunit, co AS work_country\
\
| fillnull value="unknown" category, priority, bunit\
| table identity,prefix,nick,first,last,suffix,email,phone,phone2,managedBy,priority,bunit,category,watchlist,startDate,endDate,work_city,work_country,work_lat,work_long\
\
| inputlookup append=t ldap_identities.csv\
| dedup identity startDate\
| outputlookup ldap_identities.csv
disabled = 1
alert.track = 0
alert.digest_mode = True
dispatch.earliest_time = 0
description = Search used to populate identity information from SA-ldapsearch. Filter description found at http://www.selfadsi.org/extended-ad/search-user-accounts.htm
action.email.include.results_link = 0
cron_schedule = 0 0 * * *
action.email.include.view_link = 0

[splunk_deployment_server_assets]
search = index=_internal sourcetype=splunkd component=HttpPubSubConnection| rex field=uri "\/connection\_(?<ip>[\d\.]+)\_"\
| rex field=host "(?<nt_host>[^.]+)"\
| dedup host ip\
| table ip,mac,nt_host,dns,owner,priority,lat,long,city,country,bunit,category,pci_domain,is_expected,should_timesync,should_update,requires_av\
| inputlookup append=t splunk_deployment_server_assets.csv\
| dedup ip nt_host\
| outputlookup splunk_deployment_server_assets.csv\

alert.suppress = 0
auto_summarize.dispatch.earliest_time = -1d@h
enableSched = 1
alert.track = 0
dispatch.latest_time = now
disabled = 1
alert.digest_mode = True
dispatch.earliest_time = -24h@h
description = Search used to populate asset information from Splunk deployment server logs.
action.email.include.results_link = 0
cron_schedule = 0 3 * * *
action.email.include.view_link = 0

[aws_ec2_assets]
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
disabled = 1
dispatch.earliest_time = -24h
enableSched = 1
schedule_window = 60
search = index=main sourcetype="aws:description" source="*:ec2_instances"\
\
| eval public=if(ip_address=="null", "", ip_address)."|".if(dns_name=="" OR dns_name=="null", "", dns_name)\
| eval private=private_ip_address."|".if(private_dns_name=="" OR private_dns_name=="null", "", private_dns_name)\
| eval addr=mvappend(if(public=="|", null(), public), private)\
\
| stats values(addr) AS addr latest(key_name) AS owner latest(region) AS region latest(placement) AS placement values(tags.Name) AS category latest(aws_account_id) AS bunit latest(state) by id\
\
| lookup aws_ec2_region_location region\
\
| eval category=lower(mvjoin(mvappend(category, placement, "virtual", "aws_ec2"), "|"))\
| eval priority=case(\
  match(category, "demo|test|dev"), "low",\
  1==1, "medium"\
)\
\
\
| mvexpand addr\
| eval ip=mvindex(split(addr, "|"), 0) | eval dns=mvindex(split(addr, "|"), 1)\
| rex field=dns "^(?<nt_host>[^\.]+)"\
\
| table ip,mac,nt_host,dns,owner,priority,lat,long,city,country,bunit,category,pci_domain,is_expected,should_timesync,should_update,requires_av\
| inputlookup append=t aws_ec2_assets.csv\
| dedup nt_host\
| outputlookup aws_ec2_assets.csv

